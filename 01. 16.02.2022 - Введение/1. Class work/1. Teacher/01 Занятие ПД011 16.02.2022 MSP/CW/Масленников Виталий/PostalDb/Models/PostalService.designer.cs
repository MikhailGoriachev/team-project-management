#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PostalDb.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PostalService")]
	public partial class PostalServiceDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertAddresses(Addresses instance);
    partial void UpdateAddresses(Addresses instance);
    partial void DeleteAddresses(Addresses instance);
    partial void InsertSubscribes(Subscribes instance);
    partial void UpdateSubscribes(Subscribes instance);
    partial void DeleteSubscribes(Subscribes instance);
    partial void InsertDistricts(Districts instance);
    partial void UpdateDistricts(Districts instance);
    partial void DeleteDistricts(Districts instance);
    partial void InsertPersons(Persons instance);
    partial void UpdatePersons(Persons instance);
    partial void DeletePersons(Persons instance);
    partial void InsertPostmans(Postmans instance);
    partial void UpdatePostmans(Postmans instance);
    partial void DeletePostmans(Postmans instance);
    partial void InsertPublications(Publications instance);
    partial void UpdatePublications(Publications instance);
    partial void DeletePublications(Publications instance);
    partial void InsertPubTypes(PubTypes instance);
    partial void UpdatePubTypes(PubTypes instance);
    partial void DeletePubTypes(PubTypes instance);
    partial void InsertStreets(Streets instance);
    partial void UpdateStreets(Streets instance);
    partial void DeleteStreets(Streets instance);
    partial void InsertSubscribers(Subscribers instance);
    partial void UpdateSubscribers(Subscribers instance);
    partial void DeleteSubscribers(Subscribers instance);
    #endregion
		
		public PostalServiceDataContext() : 
				base(global::PostalDb.Properties.Settings.Default.PostalServiceConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PostalServiceDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PostalServiceDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PostalServiceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PostalServiceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Addresses> Addresses
		{
			get
			{
				return this.GetTable<Addresses>();
			}
		}
		
		public System.Data.Linq.Table<Subscribes> Subscribes
		{
			get
			{
				return this.GetTable<Subscribes>();
			}
		}
		
		public System.Data.Linq.Table<Districts> Districts
		{
			get
			{
				return this.GetTable<Districts>();
			}
		}
		
		public System.Data.Linq.Table<Persons> Persons
		{
			get
			{
				return this.GetTable<Persons>();
			}
		}
		
		public System.Data.Linq.Table<Postmans> Postmans
		{
			get
			{
				return this.GetTable<Postmans>();
			}
		}
		
		public System.Data.Linq.Table<Publications> Publications
		{
			get
			{
				return this.GetTable<Publications>();
			}
		}
		
		public System.Data.Linq.Table<PubTypes> PubTypes
		{
			get
			{
				return this.GetTable<PubTypes>();
			}
		}
		
		public System.Data.Linq.Table<Streets> Streets
		{
			get
			{
				return this.GetTable<Streets>();
			}
		}
		
		public System.Data.Linq.Table<Subscribers> Subscribers
		{
			get
			{
				return this.GetTable<Subscribers>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Addresses")]
	public partial class Addresses : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdStreet;
		
		private string _Building;
		
		private int _IdDistrict;
		
		private EntitySet<Subscribers> _Subscribers;
		
		private EntityRef<Districts> _Districts;
		
		private EntityRef<Streets> _Streets;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdStreetChanging(int value);
    partial void OnIdStreetChanged();
    partial void OnBuildingChanging(string value);
    partial void OnBuildingChanged();
    partial void OnIdDistrictChanging(int value);
    partial void OnIdDistrictChanged();
    #endregion
		
		public Addresses()
		{
			this._Subscribers = new EntitySet<Subscribers>(new Action<Subscribers>(this.attach_Subscribers), new Action<Subscribers>(this.detach_Subscribers));
			this._Districts = default(EntityRef<Districts>);
			this._Streets = default(EntityRef<Streets>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdStreet", DbType="Int NOT NULL")]
		public int IdStreet
		{
			get
			{
				return this._IdStreet;
			}
			set
			{
				if ((this._IdStreet != value))
				{
					if (this._Streets.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdStreetChanging(value);
					this.SendPropertyChanging();
					this._IdStreet = value;
					this.SendPropertyChanged("IdStreet");
					this.OnIdStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Building", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string Building
		{
			get
			{
				return this._Building;
			}
			set
			{
				if ((this._Building != value))
				{
					this.OnBuildingChanging(value);
					this.SendPropertyChanging();
					this._Building = value;
					this.SendPropertyChanged("Building");
					this.OnBuildingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDistrict", DbType="Int NOT NULL")]
		public int IdDistrict
		{
			get
			{
				return this._IdDistrict;
			}
			set
			{
				if ((this._IdDistrict != value))
				{
					if (this._Districts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdDistrictChanging(value);
					this.SendPropertyChanging();
					this._IdDistrict = value;
					this.SendPropertyChanged("IdDistrict");
					this.OnIdDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Addresses_Subscribers", Storage="_Subscribers", ThisKey="Id", OtherKey="IdAddress")]
		public EntitySet<Subscribers> Subscribers
		{
			get
			{
				return this._Subscribers;
			}
			set
			{
				this._Subscribers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Districts_Addresses", Storage="_Districts", ThisKey="IdDistrict", OtherKey="Id", IsForeignKey=true)]
		public Districts Districts
		{
			get
			{
				return this._Districts.Entity;
			}
			set
			{
				Districts previousValue = this._Districts.Entity;
				if (((previousValue != value) 
							|| (this._Districts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Districts.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Districts.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._IdDistrict = value.Id;
					}
					else
					{
						this._IdDistrict = default(int);
					}
					this.SendPropertyChanged("Districts");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Streets_Addresses", Storage="_Streets", ThisKey="IdStreet", OtherKey="Id", IsForeignKey=true)]
		public Streets Streets
		{
			get
			{
				return this._Streets.Entity;
			}
			set
			{
				Streets previousValue = this._Streets.Entity;
				if (((previousValue != value) 
							|| (this._Streets.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Streets.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Streets.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._IdStreet = value.Id;
					}
					else
					{
						this._IdStreet = default(int);
					}
					this.SendPropertyChanged("Streets");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Subscribers(Subscribers entity)
		{
			this.SendPropertyChanging();
			entity.Addresses = this;
		}
		
		private void detach_Subscribers(Subscribers entity)
		{
			this.SendPropertyChanging();
			entity.Addresses = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subscribes")]
	public partial class Subscribes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdSubscriber;
		
		private int _IdPublication;
		
		private System.DateTime _StartDate;
		
		private int _Duration;
		
		private EntityRef<Publications> _Publications;
		
		private EntityRef<Subscribers> _Subscribers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdSubscriberChanging(int value);
    partial void OnIdSubscriberChanged();
    partial void OnIdPublicationChanging(int value);
    partial void OnIdPublicationChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnDurationChanging(int value);
    partial void OnDurationChanged();
    #endregion
		
		public Subscribes()
		{
			this._Publications = default(EntityRef<Publications>);
			this._Subscribers = default(EntityRef<Subscribers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSubscriber", DbType="Int NOT NULL")]
		public int IdSubscriber
		{
			get
			{
				return this._IdSubscriber;
			}
			set
			{
				if ((this._IdSubscriber != value))
				{
					if (this._Subscribers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdSubscriberChanging(value);
					this.SendPropertyChanging();
					this._IdSubscriber = value;
					this.SendPropertyChanged("IdSubscriber");
					this.OnIdSubscriberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPublication", DbType="Int NOT NULL")]
		public int IdPublication
		{
			get
			{
				return this._IdPublication;
			}
			set
			{
				if ((this._IdPublication != value))
				{
					if (this._Publications.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPublicationChanging(value);
					this.SendPropertyChanging();
					this._IdPublication = value;
					this.SendPropertyChanged("IdPublication");
					this.OnIdPublicationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Int NOT NULL")]
		public int Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publications_Subscribes", Storage="_Publications", ThisKey="IdPublication", OtherKey="Id", IsForeignKey=true)]
		public Publications Publications
		{
			get
			{
				return this._Publications.Entity;
			}
			set
			{
				Publications previousValue = this._Publications.Entity;
				if (((previousValue != value) 
							|| (this._Publications.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publications.Entity = null;
						previousValue.Subscribes.Remove(this);
					}
					this._Publications.Entity = value;
					if ((value != null))
					{
						value.Subscribes.Add(this);
						this._IdPublication = value.Id;
					}
					else
					{
						this._IdPublication = default(int);
					}
					this.SendPropertyChanged("Publications");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subscribers_Subscribes", Storage="_Subscribers", ThisKey="IdSubscriber", OtherKey="Id", IsForeignKey=true)]
		public Subscribers Subscribers
		{
			get
			{
				return this._Subscribers.Entity;
			}
			set
			{
				Subscribers previousValue = this._Subscribers.Entity;
				if (((previousValue != value) 
							|| (this._Subscribers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subscribers.Entity = null;
						previousValue.Subscribes.Remove(this);
					}
					this._Subscribers.Entity = value;
					if ((value != null))
					{
						value.Subscribes.Add(this);
						this._IdSubscriber = value.Id;
					}
					else
					{
						this._IdSubscriber = default(int);
					}
					this.SendPropertyChanged("Subscribers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Districts")]
	public partial class Districts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdPostman;
		
		private EntitySet<Addresses> _Addresses;
		
		private EntityRef<Postmans> _Postmans;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdPostmanChanging(int value);
    partial void OnIdPostmanChanged();
    #endregion
		
		public Districts()
		{
			this._Addresses = new EntitySet<Addresses>(new Action<Addresses>(this.attach_Addresses), new Action<Addresses>(this.detach_Addresses));
			this._Postmans = default(EntityRef<Postmans>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPostman", DbType="Int NOT NULL")]
		public int IdPostman
		{
			get
			{
				return this._IdPostman;
			}
			set
			{
				if ((this._IdPostman != value))
				{
					if (this._Postmans.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPostmanChanging(value);
					this.SendPropertyChanging();
					this._IdPostman = value;
					this.SendPropertyChanged("IdPostman");
					this.OnIdPostmanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Districts_Addresses", Storage="_Addresses", ThisKey="Id", OtherKey="IdDistrict")]
		public EntitySet<Addresses> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Postmans_Districts", Storage="_Postmans", ThisKey="IdPostman", OtherKey="Id", IsForeignKey=true)]
		public Postmans Postmans
		{
			get
			{
				return this._Postmans.Entity;
			}
			set
			{
				Postmans previousValue = this._Postmans.Entity;
				if (((previousValue != value) 
							|| (this._Postmans.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Postmans.Entity = null;
						previousValue.Districts.Remove(this);
					}
					this._Postmans.Entity = value;
					if ((value != null))
					{
						value.Districts.Add(this);
						this._IdPostman = value.Id;
					}
					else
					{
						this._IdPostman = default(int);
					}
					this.SendPropertyChanged("Postmans");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Addresses entity)
		{
			this.SendPropertyChanging();
			entity.Districts = this;
		}
		
		private void detach_Addresses(Addresses entity)
		{
			this.SendPropertyChanging();
			entity.Districts = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Persons")]
	public partial class Persons : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Patronymic;
		
		private EntitySet<Postmans> _Postmans;
		
		private EntitySet<Subscribers> _Subscribers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnPatronymicChanging(string value);
    partial void OnPatronymicChanged();
    #endregion
		
		public Persons()
		{
			this._Postmans = new EntitySet<Postmans>(new Action<Postmans>(this.attach_Postmans), new Action<Postmans>(this.detach_Postmans));
			this._Subscribers = new EntitySet<Subscribers>(new Action<Subscribers>(this.attach_Subscribers), new Action<Subscribers>(this.detach_Subscribers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patronymic", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persons_Postmans", Storage="_Postmans", ThisKey="Id", OtherKey="IdPerson")]
		public EntitySet<Postmans> Postmans
		{
			get
			{
				return this._Postmans;
			}
			set
			{
				this._Postmans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persons_Subscribers", Storage="_Subscribers", ThisKey="Id", OtherKey="IdPerson")]
		public EntitySet<Subscribers> Subscribers
		{
			get
			{
				return this._Subscribers;
			}
			set
			{
				this._Subscribers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Postmans(Postmans entity)
		{
			this.SendPropertyChanging();
			entity.Persons = this;
		}
		
		private void detach_Postmans(Postmans entity)
		{
			this.SendPropertyChanging();
			entity.Persons = null;
		}
		
		private void attach_Subscribers(Subscribers entity)
		{
			this.SendPropertyChanging();
			entity.Persons = this;
		}
		
		private void detach_Subscribers(Subscribers entity)
		{
			this.SendPropertyChanging();
			entity.Persons = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Postmans")]
	public partial class Postmans : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdPerson;
		
		private EntitySet<Districts> _Districts;
		
		private EntityRef<Persons> _Persons;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdPersonChanging(int value);
    partial void OnIdPersonChanged();
    #endregion
		
		public Postmans()
		{
			this._Districts = new EntitySet<Districts>(new Action<Districts>(this.attach_Districts), new Action<Districts>(this.detach_Districts));
			this._Persons = default(EntityRef<Persons>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPerson", DbType="Int NOT NULL")]
		public int IdPerson
		{
			get
			{
				return this._IdPerson;
			}
			set
			{
				if ((this._IdPerson != value))
				{
					if (this._Persons.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPersonChanging(value);
					this.SendPropertyChanging();
					this._IdPerson = value;
					this.SendPropertyChanged("IdPerson");
					this.OnIdPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Postmans_Districts", Storage="_Districts", ThisKey="Id", OtherKey="IdPostman")]
		public EntitySet<Districts> Districts
		{
			get
			{
				return this._Districts;
			}
			set
			{
				this._Districts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persons_Postmans", Storage="_Persons", ThisKey="IdPerson", OtherKey="Id", IsForeignKey=true)]
		public Persons Persons
		{
			get
			{
				return this._Persons.Entity;
			}
			set
			{
				Persons previousValue = this._Persons.Entity;
				if (((previousValue != value) 
							|| (this._Persons.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Persons.Entity = null;
						previousValue.Postmans.Remove(this);
					}
					this._Persons.Entity = value;
					if ((value != null))
					{
						value.Postmans.Add(this);
						this._IdPerson = value.Id;
					}
					else
					{
						this._IdPerson = default(int);
					}
					this.SendPropertyChanged("Persons");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Districts(Districts entity)
		{
			this.SendPropertyChanging();
			entity.Postmans = this;
		}
		
		private void detach_Districts(Districts entity)
		{
			this.SendPropertyChanging();
			entity.Postmans = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Publications")]
	public partial class Publications : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private int _IdPubType;
		
		private string _PubIndex;
		
		private int _Price;
		
		private EntitySet<Subscribes> _Subscribes;
		
		private EntityRef<PubTypes> _PubTypes;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIdPubTypeChanging(int value);
    partial void OnIdPubTypeChanged();
    partial void OnPubIndexChanging(string value);
    partial void OnPubIndexChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    #endregion
		
		public Publications()
		{
			this._Subscribes = new EntitySet<Subscribes>(new Action<Subscribes>(this.attach_Subscribes), new Action<Subscribes>(this.detach_Subscribes));
			this._PubTypes = default(EntityRef<PubTypes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPubType", DbType="Int NOT NULL")]
		public int IdPubType
		{
			get
			{
				return this._IdPubType;
			}
			set
			{
				if ((this._IdPubType != value))
				{
					if (this._PubTypes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPubTypeChanging(value);
					this.SendPropertyChanging();
					this._IdPubType = value;
					this.SendPropertyChanged("IdPubType");
					this.OnIdPubTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PubIndex", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string PubIndex
		{
			get
			{
				return this._PubIndex;
			}
			set
			{
				if ((this._PubIndex != value))
				{
					this.OnPubIndexChanging(value);
					this.SendPropertyChanging();
					this._PubIndex = value;
					this.SendPropertyChanged("PubIndex");
					this.OnPubIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publications_Subscribes", Storage="_Subscribes", ThisKey="Id", OtherKey="IdPublication")]
		public EntitySet<Subscribes> Subscribes
		{
			get
			{
				return this._Subscribes;
			}
			set
			{
				this._Subscribes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PubTypes_Publications", Storage="_PubTypes", ThisKey="IdPubType", OtherKey="Id", IsForeignKey=true)]
		public PubTypes PubTypes
		{
			get
			{
				return this._PubTypes.Entity;
			}
			set
			{
				PubTypes previousValue = this._PubTypes.Entity;
				if (((previousValue != value) 
							|| (this._PubTypes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PubTypes.Entity = null;
						previousValue.Publications.Remove(this);
					}
					this._PubTypes.Entity = value;
					if ((value != null))
					{
						value.Publications.Add(this);
						this._IdPubType = value.Id;
					}
					else
					{
						this._IdPubType = default(int);
					}
					this.SendPropertyChanged("PubTypes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Subscribes(Subscribes entity)
		{
			this.SendPropertyChanging();
			entity.Publications = this;
		}
		
		private void detach_Subscribes(Subscribes entity)
		{
			this.SendPropertyChanging();
			entity.Publications = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PubTypes")]
	public partial class PubTypes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Publications> _Publications;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PubTypes()
		{
			this._Publications = new EntitySet<Publications>(new Action<Publications>(this.attach_Publications), new Action<Publications>(this.detach_Publications));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PubTypes_Publications", Storage="_Publications", ThisKey="Id", OtherKey="IdPubType")]
		public EntitySet<Publications> Publications
		{
			get
			{
				return this._Publications;
			}
			set
			{
				this._Publications.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Publications(Publications entity)
		{
			this.SendPropertyChanging();
			entity.PubTypes = this;
		}
		
		private void detach_Publications(Publications entity)
		{
			this.SendPropertyChanging();
			entity.PubTypes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Streets")]
	public partial class Streets : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Addresses> _Addresses;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Streets()
		{
			this._Addresses = new EntitySet<Addresses>(new Action<Addresses>(this.attach_Addresses), new Action<Addresses>(this.detach_Addresses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Streets_Addresses", Storage="_Addresses", ThisKey="Id", OtherKey="IdStreet")]
		public EntitySet<Addresses> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Addresses entity)
		{
			this.SendPropertyChanging();
			entity.Streets = this;
		}
		
		private void detach_Addresses(Addresses entity)
		{
			this.SendPropertyChanging();
			entity.Streets = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subscribers")]
	public partial class Subscribers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdPerson;
		
		private int _IdAddress;
		
		private int _SubAddress;
		
		private EntitySet<Subscribes> _Subscribes;
		
		private EntityRef<Addresses> _Addresses;
		
		private EntityRef<Persons> _Persons;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdPersonChanging(int value);
    partial void OnIdPersonChanged();
    partial void OnIdAddressChanging(int value);
    partial void OnIdAddressChanged();
    partial void OnSubAddressChanging(int value);
    partial void OnSubAddressChanged();
    #endregion
		
		public Subscribers()
		{
			this._Subscribes = new EntitySet<Subscribes>(new Action<Subscribes>(this.attach_Subscribes), new Action<Subscribes>(this.detach_Subscribes));
			this._Addresses = default(EntityRef<Addresses>);
			this._Persons = default(EntityRef<Persons>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPerson", DbType="Int NOT NULL")]
		public int IdPerson
		{
			get
			{
				return this._IdPerson;
			}
			set
			{
				if ((this._IdPerson != value))
				{
					if (this._Persons.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPersonChanging(value);
					this.SendPropertyChanging();
					this._IdPerson = value;
					this.SendPropertyChanged("IdPerson");
					this.OnIdPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAddress", DbType="Int NOT NULL")]
		public int IdAddress
		{
			get
			{
				return this._IdAddress;
			}
			set
			{
				if ((this._IdAddress != value))
				{
					if (this._Addresses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdAddressChanging(value);
					this.SendPropertyChanging();
					this._IdAddress = value;
					this.SendPropertyChanged("IdAddress");
					this.OnIdAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubAddress", DbType="Int NOT NULL")]
		public int SubAddress
		{
			get
			{
				return this._SubAddress;
			}
			set
			{
				if ((this._SubAddress != value))
				{
					this.OnSubAddressChanging(value);
					this.SendPropertyChanging();
					this._SubAddress = value;
					this.SendPropertyChanged("SubAddress");
					this.OnSubAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subscribers_Subscribes", Storage="_Subscribes", ThisKey="Id", OtherKey="IdSubscriber")]
		public EntitySet<Subscribes> Subscribes
		{
			get
			{
				return this._Subscribes;
			}
			set
			{
				this._Subscribes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Addresses_Subscribers", Storage="_Addresses", ThisKey="IdAddress", OtherKey="Id", IsForeignKey=true)]
		public Addresses Addresses
		{
			get
			{
				return this._Addresses.Entity;
			}
			set
			{
				Addresses previousValue = this._Addresses.Entity;
				if (((previousValue != value) 
							|| (this._Addresses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Addresses.Entity = null;
						previousValue.Subscribers.Remove(this);
					}
					this._Addresses.Entity = value;
					if ((value != null))
					{
						value.Subscribers.Add(this);
						this._IdAddress = value.Id;
					}
					else
					{
						this._IdAddress = default(int);
					}
					this.SendPropertyChanged("Addresses");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persons_Subscribers", Storage="_Persons", ThisKey="IdPerson", OtherKey="Id", IsForeignKey=true)]
		public Persons Persons
		{
			get
			{
				return this._Persons.Entity;
			}
			set
			{
				Persons previousValue = this._Persons.Entity;
				if (((previousValue != value) 
							|| (this._Persons.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Persons.Entity = null;
						previousValue.Subscribers.Remove(this);
					}
					this._Persons.Entity = value;
					if ((value != null))
					{
						value.Subscribers.Add(this);
						this._IdPerson = value.Id;
					}
					else
					{
						this._IdPerson = default(int);
					}
					this.SendPropertyChanged("Persons");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Subscribes(Subscribes entity)
		{
			this.SendPropertyChanging();
			entity.Subscribers = this;
		}
		
		private void detach_Subscribes(Subscribes entity)
		{
			this.SendPropertyChanging();
			entity.Subscribers = null;
		}
	}
}
#pragma warning restore 1591
